@page "{pageNumber:int?}"
@model InvoiceApp.Pages.Invoices.IndexModel
@{
}

<h2 class="text-center mb-3">Invoices</h2>

<input type="text" id="searchInput" placeholder="Search..." class="form-control mb-3" onkeyup="searchInvoices()" />

<a class="btn btn-primary" asp-page="/Invoices/Create">New Invoice</a>

<table class="table">
  <thead>
    <tr>
      <th>ID</th>
      <th>Invoice No</th>
      <th>Status</th>
      <th>Client</th>
      <th>Total Price</th>
      <th>Issue Date</th>
      <th>Due Date</th>
      <th>Action</th>
      <th></th>
    </tr>
  </thead>
  <tbody class="table-group-divider" id="invoiceTableBody">
    @foreach (var invoice in Model.invoices)
    {
      <tr>
        <td>@invoice.Id</td>
        <td>@invoice.Number</td>
        <td>@invoice.Status</td>
        <td>@invoice.ClientName</td>
        <td>@(invoice.Quantity* invoice.UnitPrice)$</td>
        <td>@invoice.IssueDate</td>
        <td>@invoice.DueDate</td>
        <td style="white-space:nowrap;">
          <a class="btn btn-primary btn-sm" asp-page="/Invoices/Edit" asp-route-id="@invoice.Id">Edit</a>
          <a class="btn btn-info btn-sm" asp-page="/Invoices/Details" asp-route-id="@invoice.Id">Details</a>
          <a href="#" onclick="confirmDelete(@invoice.Id)" class="btn btn-danger btn-sm">Delete</a>
        </td>
      </tr>
    }
  </tbody>
</table>

<div id="paginationControls">
  <button onclick="previousPage()" @(Model.CurrentPage == 1 ? "disabled" : "")>Previous</button>
  <span id="pageNumber">@Model.CurrentPage</span>
  <button onclick="nextPage()" @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")>Next</button>
</div>

<script>
  //let currentPage = 1;
  //const itemsPerPage = 10;

  function searchInvoices() {
    const searchInput = document.getElementById('searchInput').value.toLowerCase();
    const rows = document.querySelectorAll('#invoiceTableBody tr');
    rows.forEach(row => {
      const columns = row.querySelectorAll('td');
      let found = false;
      columns.forEach(column => {
        if (column.textContent.toLowerCase().indexOf(searchInput) > -1) {
          found = true;
        }
      });
      row.style.display = found ? '' : 'none';
    });
    updatePagination();
  }

  function confirmDelete(id) {
    if (confirm("Are you sure you want to delete this invoice?")) {
      window.location.href = "/Invoices/Delete?id=" + id;
    }
  }

  function updatePagination() {
    const rows = document.querySelectorAll('#invoiceTableBody tr');
    let visibleRows = Array.from(rows).filter(row => row.style.display !== 'none');
    visibleRows.forEach((row, index) => {
      row.style.display = (index >= (currentPage - 1) * itemsPerPage && index < currentPage * itemsPerPage) ? '' : 'none';
    });
    document.getElementById('pageNumber').textContent = currentPage;
  }

  function previousPage() {
    const currentPage = parseInt(document.getElementById('pageNumber').textContent);
    if (currentPage > 1) {
      window.location.href = `?currentPage=${currentPage - 1}`;
    }
  }

  function nextPage() {
    const currentPage = parseInt(document.getElementById('pageNumber').textContent);
    const totalPages = parseInt('@Model.TotalPages');
    if (currentPage < totalPages) {
      window.location.href = `?currentPage=${currentPage + 1}`;
    }

    @* const rows = document.querySelectorAll('#invoiceTableBody tr');
    let visibleRows = Array.from(rows).filter(row => row.style.display !== 'none');
    if (currentPage * itemsPerPage < visibleRows.length) {
      currentPage++;
      updatePagination();
    } *@
  }

  //# updatePagination();
</script>